%YAML 1.2
---
# Sublime PML: Alpha 0.1.3 (2021/03/11)                              | PML 1.3.0
################################################################################
#                                                                              #
#                       PML (Practical Markup Language)                        #
#                                                                              #
#                              www.pml-lang.dev                                #
#                                                                              #
################################################################################
# PML syntax definition by Tristano Ajmone, MIT License:
#   https://github.com/tajmone/Sublime-PML
#
# The Practical Markup Language was created by Christian Neumanns:
#   https://github.com/pml-lang
#   https://github.com/practical-markup-language
# ------------------------------------------------------------------------------
name: PML (Practical Markup Language)
file_extensions:
  - pml
scope: text.html.pml

variables:
  # TODO: Need to check PML specs for actual IDs definition.
  identifier: '[A-Za-z_][A-Za-z_0-9]*'

contexts:
  prototype:
    - include: escapes
    - include: comment
    - include: parameter

  main:
    - include: pml_nodes

# ------------------------------------------------------------------------------

  bail-out:
    - match: (?=\S)
      pop: true

  escapes:
    - match: '\\[\[\]=\\]'
      scope: constant.character.escape.pml

  ## Parameter
  ############

  parameter:
    - match: '(<<)({{identifier}})(>>)'
      captures:
        0: meta.function-call.pml
        1: punctuation.definition.generic.begin.pml
        2: support.function.call.pml
        3: punctuation.definition.generic.end.pml

# ******************************************************************************
# *                                                                            *
# *                                 PML Nodes                                  *
# *                                                                            *
# ******************************************************************************

  pml_nodes:
    - match: '(?=\[)'
      push: maybe_node

  maybe_node:
    - include: block_nodes
    - include: inline_nodes
    - include: text_processing_nodes
    - include: unknown_node
    # TODO: When all nodes are implemented, all that's left is an
    #       unescaped '[', which should be scoped as invalid/error!
    - include: bail-out

  unknown_node:
    - match: '\[[a-z]+\b'
      scope: entity.name.tag.begin.pml
      push: unknown_node_inside
  unknown_node_inside:
    - include: pml_nodes
    - match: ']'
      scope: entity.name.tag.end.pml
      pop: true


# ==============================================================================
#                                  Block  Nodes
# ==============================================================================

  block_nodes:
    - include: doc

## Document
###########

  # NOTE: I'm not really happy with the current scope being used.

  doc:
    - match: '\[(doc(?:ument)?\b|==)'
      scope: keyword.declaration.document.begin.pml
      push: doc_inside
  doc_inside:
    - meta_scope: meta.block.document.pml
    - include: pml_nodes
    - match: ']'
      scope: keyword.declaration.document.end.pml
      pop: true

# ==============================================================================
#                                  Inline Nodes
# ==============================================================================

  inline_nodes:
    - include: bold
    - include: italic

## Font: Bold Text
##################

  bold:
    - match: '\[(b(?:old)?\b|\*)'
      scope: punctuation.definition.bold.begin.pml
      push: bold_inside
  bold_inside:
    - meta_scope: markup.bold.pml
    - include: inline_nodes
    - match: ']'
      scope: punctuation.definition.bold.end.pml
      pop: true

## Font: Italic Text
####################

  italic:
    - match: '\[(i(?:talic)?\b|_)'
      scope: punctuation.definition.italic.begin.pml
      push: italic_inside
  italic_inside:
    - meta_scope: markup.italic.pml
    - include: inline_nodes
    - match: ']'
      scope: punctuation.definition.italic.end.pml
      pop: true

# ==============================================================================
#                             Text Processing Nodes
# ==============================================================================

  text_processing_nodes:
    - include: constant

## Comment
##########

  comment:
    - match: '\[--'
      scope: punctuation.definition.comment.begin.pml
      push: comment_inside
  comment_inside:
    - meta_scope: comment.block.pml
    - meta_include_prototype: false
    - include: comment
    - match: '--]'
      scope: punctuation.definition.comment.end.pml
      pop: true

## Constant Parameter
#####################

  constant:
    - match: '\[const(?:ant)?\b'
      scope: entity.name.tag.constant.begin.pml
      push: constant_inside
  constant_inside:
    - meta_scope: meta.tag.constant.pml
    - match: ']'
      scope: entity.name.tag.constant.end.pml
      pop: true
    - match: '\b{{identifier}}\b'
      scope: entity.name.function.pml
    - match: '='
      scope: keyword.operator.assignment.pml
      set: constant_value
  constant_value:
    - meta_scope: meta.tag.constant.pml
    - match: ']'
      scope: entity.name.tag.constant.end.pml
      pop: true
    - include: string
    - include: bail-out

# ******************************************************************************
# *                                                                            *
# *                               PML Attributes                               *
# *                                                                            *
# ******************************************************************************

# ==============================================================================
#                               Attributes Values
# ==============================================================================

# Attributes' and tags' values can be various types:
#   - [x] String double-quoted
#   - [x] String without quotes
#   - [ ] Other ...

  # NOTE: Strings are also used for tag values, not just attributes.
  string:
    - include: string_quoted
    - include: string_unquoted
    - include: bail-out

  string_unquoted:
    - match: '(?! )'
      push:
        - meta_scope: string.unquoted.pml
        - match: '(?=[ ]+)$'
          pop: true
        - match: '(?=[ ]*\])'
          pop: true

  string_quoted:
    - match: '"'
      scope: punctuation.definition.string.begin.pml
      push: string_quoted_inside
  string_quoted_inside:
    # TODO: Should stop using prototypes inside string?
    - meta_scope: string.quoted.double.pml
    - include: string_quoted_escapes
    - match: '"'
      scope: punctuation.definition.string.end.pml
      pop: true
  string_quoted_escapes:
    - match: '\\"'
      scope: constant.character.escape.pml
