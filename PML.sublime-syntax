%YAML 1.2
---
# Sublime PML: Alpha 0.0.4 (2021/03/06)                              | PML 1.2.0
################################################################################
#                                                                              #
#                       PML (Practical Markup Language)                        #
#                                                                              #
#                              www.pml-lang.dev                                #
#                                                                              #
################################################################################
# PML syntax definition by Tristano Ajmone, MIT License:
#   https://github.com/tajmone/Sublime-PML
#
# The Practical Markup Language was created by Christian Neumanns:
#   https://github.com/pml-lang
#   https://github.com/practical-markup-language
# ------------------------------------------------------------------------------
name: PML (Practical Markup Language)
file_extensions:
  - pml
scope: text.html.pml
contexts:
  prototype:
    - include: escapes
    - include: comments

  main:
    - include: string_dobule_quoted
    - match: '(?=\{)'
      push: maybe_node

# ------------------------------------------------------------------------------

  bail-out:
    - match: (?=\S)
      pop: true

  escapes:
    - match: '\\[{}=\\]'
      scope: constant.character.escape.pml

  # TODO: Strings in PML should only be used for attributes within quotes.
  string_dobule_quoted:
    - match: '"'
      scope: punctuation.definition.string.begin.pml
      push: string_dobule_quoted_inside
  string_dobule_quoted_inside:
    # TODO: Should stop using prototypes inside string?
    - meta_scope: string.quoted.double.pml
    - include: string_dobule_quoted_escapes
    - match: '"'
      scope: punctuation.definition.string.end.pml
      pop: true
  string_dobule_quoted_escapes:
    - match: '\\"'
      scope: constant.character.escape.pml

# ==============================================================================
#                                   PML Nodes
# ==============================================================================

  maybe_node:
    - include: bold
    - include: italic
    # TODO: When all nodes are implemented, all that's left is an
    #       unescaped '{', which should be scoped as invalid/error!
    - include: bail-out

  ## Block  Nodes
  ###############

  ## Inline Nodes
  ###############

  bold:
    - match: '{(b(?:old)?\b|\*)'
      scope: punctuation.definition.bold.begin.pml
      push: bold_inside
  bold_inside:
    - meta_scope: markup.bold.pml
    - match: '}'
      scope: punctuation.definition.bold.end.pml
      pop: true

  italic:
    - match: '{(i(?:talic)?\b|_)'
      scope: punctuation.definition.italic.begin.pml
      push: italic_inside
  italic_inside:
    - meta_scope: markup.italic.pml
    - match: '}'
      scope: punctuation.definition.italic.end.pml
      pop: true

  ## Text Processing Nodes
  ########################

  comments:
    - match: '{--'
      scope: punctuation.definition.comment.begin.pml
      push: comments_inside
  comments_inside:
    - meta_scope: comment.block.pml
    - meta_include_prototype: false
    - include: comments
    - match: '--}'
      scope: punctuation.definition.comment.end.pml
      pop: true
