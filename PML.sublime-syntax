%YAML 1.2
---
# Sublime PML: Alpha 0.1.10(2021/03/26)                              | PML 1.3.0
################################################################################
#                                                                              #
#                       PML (Practical Markup Language)                        #
#                                                                              #
#                              www.pml-lang.dev                                #
#                                                                              #
################################################################################
# PML syntax definition by Tristano Ajmone, MIT License:
#   https://github.com/tajmone/Sublime-PML
#
# The Practical Markup Language was created by Christian Neumanns:
#   https://github.com/pml-lang
# ------------------------------------------------------------------------------
name: PML (Practical Markup Language)
file_extensions:
  - pml
scope: text.html.pml

variables:
  identifier: '[a-zA-Z][a-zA-Z0-9_]*'

contexts:
  prototype:
    - include: escapes
    - include: comment
    - include: parameter

  main:
    - include: pml_nodes

# ------------------------------------------------------------------------------

  ## Helpers
  ############

  bail-out:
    - match: (?=\S)
      pop: true

  pop-at-EOL:
    - match: (?=[\n$])
      pop: true

# ==============================================================================
#                               Misc. PML Elements
# ==============================================================================

  escapes:
    - match: '\\[\[\]=\\]'
      scope: constant.character.escape.pml

  line_continuation:
    - match: '(\\)(\n)'
      captures:
        1: punctuation.separator.continuation.pml

  pop-at-line_continuation:
    - match: '(?=[ ]*\\$)'
      pop: true

  parameter:
    - match: '(<<)({{identifier}})(>>)'
      captures:
        0: meta.function-call.pml
        1: punctuation.definition.generic.begin.pml
        2: support.function.call.pml
        3: punctuation.definition.generic.end.pml

# ******************************************************************************
# *                                                                            *
# *                                 PML Nodes                                  *
# *                                                                            *
# ******************************************************************************

  pml_nodes:
    - match: '(?=\[)'
      push: maybe_node

  maybe_node:
    - include: block_nodes
    - include: inline_nodes
    - include: text_processing_nodes
    - include: unknown_node
    # TODO: When all nodes are implemented, all that's left is an
    #       unescaped '[', which should be scoped as invalid/error!
    - include: bail-out

  unknown_node:
    # This is a just a temporary scope, to cover the unimplemented nodes.
    # It will be removed once all nodes are implemented.
    - match: '\[[a-z]+\b'
      scope: entity.name.tag.other.begin.pml
      push: unknown_node_inside
  unknown_node_inside:
    - match: ']'
      scope: entity.name.tag.other.end.pml
      pop: true
    - include: attributes
    - include: pml_nodes


# ==============================================================================
#                                  Block Nodes
# ==============================================================================

  block_nodes:
    - include: doc      # Document
    - include: chapter  # Chapter
    # admonition        # Admonition
    # audio             # Audio (Sound)
    # caption           # Caption
    # code              # Source Code
    # constant          # Constant Parameter
    # division          # Division
    # HTML              # HTML Code
    # image             # Image
    # input             # Input
    # insert            # Insert File
    # insert_code       # Insert Source Code
    # list              # List
    # list_element      # List Element
    # monospace         # Monospace
    # note              # Note
    # output            # Output
    # paragraph         # Paragraph
    # quote             # Quote
    # table             # Table
    # table_cell        # Table Cell
    # table_data        # Table Data
    # table_footer      # Table Footer
    # table_header      # Table Header
    # table_row         # Table Row
    # video             # Video
    # youtube_video     # Embedded Youtube Video

## Document
###########

  # NOTE: I'm not really happy with the current scope being used.

  doc:
    - match: '\[(doc(?:ument)?\b|==)'
      scope: keyword.declaration.document.begin.pml
      push: [doc_block, doc_attributes]
  doc_block:
    - meta_scope: meta.block.document.pml
    - include: pml_nodes
    - match: ']'
      scope: keyword.declaration.document.end.pml
      pop: true
  doc_attributes:
    - meta_scope: meta.annotation.node-attributes.document.pml
    - include: attributes

## Chapter
###########

  # TODO: Should whole section be marked as "Chapter/Section"?
  # TODO: In the future, track levels:
  #         markup.heading.level1.pml
  #         markup.heading.level2.pml
  #                 [...]
  #         markup.heading.level6.pml

  chapter:
    - match: '\[(ch(?:apter)?\b|=(?!=))'
      scope: punctuation.definition.section.block.chapter.begin.pml
      push: [chapter_block, chapter_attributes]

  chapter_block:
    - meta_scope: meta.block.chapter.pml
    - include: pml_nodes
    - match: ']'
      scope: punctuation.definition.section.block.chapter.end.pml
      pop: true

  chapter_attributes:
    - meta_scope: meta.annotation.node-attributes.chapter.pml
    - include: chapter_title
    - include: attributes

  chapter_title:
    - match: 'title'
      scope: entity.other.attribute-name.title.pml
      push:
        - match: '='
          scope: keyword.operator.assignment.pml
          set:
            - meta_scope: markup.heading.pml
            - include: chapter_title_quoted
            - include: chapter_title_unquoted
            - include: bail-out

  chapter_title_unquoted:
    - match: '(?! )'
      set:
        - match: '(?=[ ]+)$'
          pop: true
        - match: '(?=[ ]*\])'
          pop: true
        - include: pop-at-line_continuation
        - include: pop-at-EOL
        - match: '.'
          scope: entity.name.section.unquoted.pml markup.heading.pml meta.toc-list.pml

  chapter_title_quoted:
    - match: '"'
      scope: punctuation.definition.string.begin.pml
      set: chapter_title_quoted_inside
  chapter_title_quoted_inside:
    # TODO: Should stop using prototypes inside string?
    - meta_scope: entity.name.section.quoted.pml markup.heading.pml meta.toc-list.pml
    - include: string_quoted_escapes
    - match: '"'
      scope: punctuation.definition.string.end.pml
      pop: true



# ==============================================================================
#                                  Inline Nodes
# ==============================================================================

  inline_nodes:
    - include: bold     # Bold Text
    - include: italic   # Italic Text
    # inline_code       # Inline Source Code
    # link              # URL Link
    # new_line          # New Line
    # space             # Space Character
    # span              # Span
    # text              # Text
    # verbatim          # Verbatim Text
    # xref              # Cross-Reference

## Font: Bold Text
##################

  bold:
    - match: '\[(b(?:old)?\b|\*)'
      scope: punctuation.definition.bold.begin.pml
      push: bold_inside
  bold_inside:
    - meta_scope: markup.bold.pml
    - include: inline_nodes
    - match: ']'
      scope: punctuation.definition.bold.end.pml
      pop: true

## Font: Italic Text
####################

  italic:
    - match: '\[(i(?:talic)?\b|_)'
      scope: punctuation.definition.italic.begin.pml
      push: italic_inside
  italic_inside:
    - meta_scope: markup.italic.pml
    - include: inline_nodes
    - match: ']'
      scope: punctuation.definition.italic.end.pml
      pop: true

# ==============================================================================
#                             Text Processing Nodes
# ==============================================================================

  text_processing_nodes:
    - include: constant   # Constant Parameter
    # insert              # Insert File
    # comment [-> prototype]

## Comment
##########

  comment:
    - match: '\[--'
      scope: punctuation.definition.comment.begin.pml
      push: comment_inside
  comment_inside:
    - meta_scope: comment.block.pml
    - meta_include_prototype: false
    - include: comment
    - match: '--]'
      scope: punctuation.definition.comment.end.pml
      pop: true

## Constant Parameter
#####################

  constant:
    - match: '\[const(?:ant)?\b'
      scope: entity.name.tag.constant.begin.pml
      push: constant_inside
  constant_inside:
    - meta_scope: meta.tag.constant.pml
    - match: ']'
      scope: entity.name.tag.constant.end.pml
      pop: true
    - match: '\b{{identifier}}\b'
      scope: entity.name.function.pml
    - match: '='
      scope: keyword.operator.assignment.pml
      set: constant_value
  constant_value:
    - meta_scope: meta.tag.constant.pml
    - match: ']'
      scope: entity.name.tag.constant.end.pml
      pop: true
    - include: string
    - include: bail-out

# ******************************************************************************
# *                                                                            *
# *                               PML Attributes                               *
# *                                                                            *
# ******************************************************************************

# As a general rule, node attributes should be matched regardless of the current
# node (i.e. the syntax shouldn't be context-strict). It's not the business of
# the highlighter to validate the syntax; on the contrary, error tolerance is
# preferable, since users often copy-and-paste snippets around to work quicker.

  attributes:
    - include: line_continuation
    - match: (?=\])
      pop: true
    - include: pop-at-EOL
    - include: attr_date
    # TODO: implement remaining attributes...
    - include: attr_unknown   # <- Temp fall-back for unimplemented attributes!

  attr_date:
    - match: '\b(date)\b'
      scope: entity.other.attribute-name.date.pml
      set:
        - match: '='
          scope: keyword.operator.assignment.pml
          set:
            - include: pop-at-line_continuation
            - include: pop-at-EOL
            # TODO: Find better scoping names for date format.
            # TODO: Move date definition to "PML Types" section, then `include` it.
            - match: '\b(\d{4})-(\d{2})-(\d{2})\b'
              captures:
                0: constant.numeric.date.pml
                1: constant.numeric.year.pml
                2: constant.numeric.month.pml
                3: constant.numeric.day.pml


  attr_unknown:
    # This is a just a temporary scope, to cover the unimplemented attributes.
    # It will be removed once all nodes and attributes are implemented.
    - include: line_continuation
    - match: ']'
      scope: entity.name.tag.other.end.pml
      pop: true
    - match: '\b({{identifier}})\b *(=)'
      captures:
        1: entity.other.attribute-name.unknown.pml
        2: keyword.operator.assignment.pml
    - include: pop-at-EOL

# ******************************************************************************
# *                                                                            *
# *                                 PML Types                                  *
# *                                                                            *
# ******************************************************************************

# Attributes' and tags' values can be of various types:
#   - [x] String double-quoted
#   - [x] String without quotes
#   - [ ] Date
#   - [ ] Other ...

  string:
    - include: string_quoted   # must always precede `string_unquoted`
    - include: string_unquoted
    - include: bail-out
  # - include: pop-at-EOL  # <- might be required later!

  string_quoted:
    - match: '"'
      scope: punctuation.definition.string.begin.pml
      push: string_quoted_inside
  string_quoted_inside:
    # TODO: Should stop using prototypes inside string?
    - meta_scope: string.quoted.double.pml
    - include: string_quoted_escapes
    - match: '"'
      scope: punctuation.definition.string.end.pml
      pop: true
  string_quoted_escapes:
    - match: '\\"'
      scope: constant.character.escape.pml

  string_unquoted:
    - match: '(?! )'
      push:
        - meta_scope: string.unquoted.pml
        - match: '(?=[ ]+)$'
          pop: true
        - match: '(?=[ ]*\])'
          pop: true
      # - include: pop-at-EOL  # <- might be required later!

# EOF #
