%YAML 1.2
---
# Sublime PML: Alpha 0.6-0 (2021/06/28)                              | PML 1.5.0
################################################################################
#                                                                              #
#                       PML (Practical Markup Language)                        #
#                                                                              #
#                              www.pml-lang.dev                                #
#                                                                              #
################################################################################
# PML syntax definition for Sublime Text 4, by Tristano Ajmone, MIT License:
#   https://github.com/tajmone/Sublime-PML
#
# The Practical Markup Language was created by Christian Neumanns:
#   https://github.com/pml-lang
# ------------------------------------------------------------------------------
name: PML (Practical Markup Language)
file_extensions:
  - pml
scope: text.pml
version: 2

variables:
  custom_id: '[a-zA-Z][a-zA-Z0-9_]*' # PML 1.4.0 (Will change in the future!)
  pml_token: '[a-z][a-z_]*' # PML tags and attributes are lowercase, no digits.

contexts:
  prototype:
    - include: escapes
    - include: comment
    - include: parameter

  main:
    - include: pml_nodes

# ------------------------------------------------------------------------------

  ## Helpers
  ##########

  bail-out:
    - match: (?=\S)
      pop: true

  pop-at-EOL:
    - match: (?=[\n$])
      pop: true

  pop-at-TagEnd:
    - match: '(?=])'
      pop: true

  pop-at-line_continuation:
    - match: '(?=\s*\\$)'
      pop: true

  comsume-whitespace:
    - match: '[ \t]+'

  comsume-EOL:
    - match: '[\n$]'


# ==============================================================================
#                               Prototype Contexts
# ==============================================================================

  escapes:
    - match: '\\[\[\]=\\]'
      scope: constant.character.escape.pml

  parameter:
    - match: '(<<)({{custom_id}})(>>)'
      captures:
        0: meta.function-call.pml
        1: punctuation.definition.generic.begin.pml
        2: support.function.call.pml
        3: punctuation.definition.generic.end.pml

## Comment
##########

  comment:
    - match: '\[-'
      scope: punctuation.definition.comment.begin.pml
      push: comment_inside
  comment_inside:
    - meta_scope: comment.block.pml
    - meta_include_prototype: false
    - include: comment
    - match: '-]'
      scope: punctuation.definition.comment.end.pml
      pop: true

# ==============================================================================
#                               Misc. PML Elements
# ==============================================================================

  line_continuation:
    - match: '(\\)(\n)'
      captures:
        1: punctuation.separator.continuation.pml

# ******************************************************************************
# *                                                                            *
# *                                 PML Nodes                                  *
# *                                                                            *
# ******************************************************************************

  pml_nodes:
    - match: '(?=\[)'
      push: maybe_node

  maybe_node:
    - include: block_nodes
    - include: inline_nodes
    - include: text_processing_nodes
    - include: unknown_node
    # TODO: When all nodes are implemented, all that's left is an
    #       unescaped '[', which should be scoped as invalid/error!
    - include: bail-out

  unknown_node:
    # This is a just a temporary scope, to cover the unimplemented nodes.
    # It will be removed once all nodes are implemented.
    - match: '\[{{pml_token}}\b'
      scope: entity.name.tag.unknown.begin.pml
      push: unknown_node_inside
  unknown_node_inside:
    - match: ']'
      scope: entity.name.tag.unknown.end.pml
      pop: true
    # We need to force-push here, because attributes pop-out at EOL!
    - match: ''
      push:
      - include: attributes
      - include: pml_nodes


# ==============================================================================
#                                  Block Nodes
# ==============================================================================
# Every block-node opening and closing tags are scoped as:
#   - entity.name.tag.block-node.<NODE_NAME>.begin
#   - entity.name.tag.block-node.<NODE_NAME>.end
# except for raw-text blocks, which are given an extra `.raw` segment:
#   - entity.name.tag.block-node.raw.<NODE_NAME>.begin
#   - entity.name.tag.block-node.raw.<NODE_NAME>.end
# This consistent scope naming allows to easily target all nodes of a certain
# category via scope selectors (e.g. in colour schemes, completions, etc.).
# ------------------------------------------------------------------------------

# TODO: Sort `include:` statements by nodes' usage frequency. This should
#       improve performance, since each match resets the context loop.

  block_nodes:
    - include: doc         # Document
    - include: chapter     # Chapter
    - include: html        # HTML Code
    - include: quote       # Quote
    - include: sourcecode  # Source Code Block
    # admonition        # Admonition
    # audio             # Audio (Sound)
    # caption           # Caption
    # constant          # Constant Parameter
    # division          # Division
    # image             # Image
    # input             # Input
    # insert            # Insert File
    # insert_code       # Insert Source Code
    # list              # List
    # list_element      # List Element
    # monospace         # Monospace
    # note              # Note
    # output            # Output
    # paragraph         # Paragraph
    # table             # Table
    # table_cell        # Table Cell
    # table_data        # Table Data
    # table_footer      # Table Footer
    # table_header      # Table Header
    # table_row         # Table Row
    # video             # Video
    # youtube_video     # Embedded YouTube Video

# TODO: Order nodes contexts alphabetically, to simplify source navigation.


## Quote
########

  quote:
    - match: '\[quote\b'
      scope: entity.name.tag.block-node.quote.begin.pml
      push: [quote_block, quote_attributes]
  quote_block:
    - meta_scope: markup.quote.pml
    - include: pml_nodes
    - match: ']'
      scope: entity.name.tag.block-node.quote.end.pml
      pop: true
  quote_attributes:
    - meta_scope: meta.annotation.node-attributes.quote.pml
    - include: attributes

## Document
###########

  # NOTE: I'm not really happy with the current scope being used.

  doc:
    - match: '\[doc\b'
      scope: entity.name.tag.block-node.document.begin.pml
      push: [doc_block, doc_attributes]
  doc_block:
    - meta_scope: meta.block.document.pml
    - include: pml_nodes
    - match: ']'
      scope: entity.name.tag.block-node.document.end.pml
      pop: true
  doc_attributes:
    - meta_scope: meta.annotation.node-attributes.document.pml
    - include: attributes

## Chapter
###########

  chapter:
    - match: '\[ch\b'
      scope: entity.name.tag.block-node.section.begin.pml
      push: [chapter_block, chapter_attributes]

  chapter_block:
    - meta_scope: meta.block.chapter.pml
    - include: pml_nodes
    - match: ']'
      scope: entity.name.tag.block-node.section.end.pml
      pop: true

  chapter_attributes:
    - meta_scope: meta.annotation.node-attributes.chapter.pml
    - include: chapter_title
    - include: attributes

  chapter_title:
    - match: 'title'
      scope: entity.other.attribute-name.title.pml
      push:
        - match: '='
          scope: keyword.operator.assignment.pml
          set:
            - meta_scope: markup.heading.pml
            - include: chapter_title_quoted
            - include: chapter_title_unquoted
            - include: bail-out

  chapter_title_unquoted:
    - match: '(?! )'
      set:
        - meta_content_scope: entity.name.section.unquoted.pml markup.heading.pml meta.toc-list.heading.pml
        - match: '(?=\s+)$'
          pop: true
        - match: '(?=\s*\])'
          pop: true
        - include: pop-at-line_continuation
        - include: pop-at-EOL
        - include: parameter
        - match: '.'

  chapter_title_quoted:
    - match: '"'
      scope: punctuation.definition.string.begin.pml
      set: chapter_title_quoted_inside
  chapter_title_quoted_inside:
    # TODO: Should stop using prototypes inside string?
    - meta_scope: entity.name.section.quoted.pml markup.heading.pml meta.toc-list.heading.pml
    - include: string_quoted_escapes
    - match: '"'
      scope: punctuation.definition.string.end.pml
      pop: true

############################
##  RAW-TEXT BLOCK NODES  ##
############################----------------------------------------------------
# This group of block-nodes contain 'raw text', i.e. their contents are not
# processed by PMLC, which means that they can't contain any PML nodes inside,
# and their tag name is repeated in the closing node delimiter (see #24).
# For this reason, they are scoped with an extra `.raw` segment:
#   - entity.name.tag.block-node.raw.<NODE_NAME>.begin
#   - entity.name.tag.block-node.raw.<NODE_NAME>.end
# in order to simplify targeting them via scope selectors.
# ------------------------------------------------------------------------------

## Source Code Block
####################

  # FIXME: When the node has no attributes, contents following the tag are not
  #        scoped as `source.block.listing.content`.

  sourcecode:
    - match: '\[code\b'
      scope: entity.name.tag.block-node.raw.listing.begin.pml
      push: [sourcecode_block, sourcecode_attributes]
  sourcecode_block:
    - meta_scope: meta.embedded.block.listing.pml
    - match: ''
      set:
      - meta_content_scope: source.block.listing.content.pml
                            meta.embedded.block.listing.pml
      - match: '\bcode]'
        scope:  entity.name.tag.block-node.raw.listing.end.pml
                meta.embedded.block.listing.pml
        pop: true
  sourcecode_attributes:
    - meta_scope: meta.annotation.node-attributes.listing.pml
    - include: attributes

## HTML
#######

  html:
    - match: '\[html\b'
      scope: entity.name.tag.block-node.raw.html.begin.pml
      push: Packages/HTML/HTML.sublime-syntax
      with_prototype:
        - match: '\b(?=html\])'
          pop: true
    - match: '\bhtml\]'
      scope: entity.name.tag.block-node.raw.html.end.pml
      pop: true

# ==============================================================================
#                                  Inline Nodes
# ==============================================================================
# Every inline-node opening and closing tags are scoped as:
#   - entity.name.tag.inline-node.<NODE_NAME>.begin
#   - entity.name.tag.inline-node.<NODE_NAME>.end
# This consistent scope naming allows to easily target all nodes of a certain
# category via scope selectors (e.g. in colour schemes, completions, etc.).
# ------------------------------------------------------------------------------

  inline_nodes:
    - include: bold         # Bold Text
    - include: italic       # Italic Text
    - include: code         # Inline Source Code
    - include: newline      # New Line (<br>)
    - include: space        # Non-Breaking Space (&nbsp;)
    - include: span         # Span
    - include: subscript    # Subscript Text
    - include: superscript  # Superscript Text
    - include: strike       # Strikethrough Text
    # link                  # URL Link
    # verbatim              # Verbatim Text
    # xref                  # Cross-Reference

## Font: Bold Text
##################

  bold:
    - match: '\[b\b'
      scope: entity.name.tag.inline-node.bold.begin.pml
      push: bold_inside
  bold_inside:
    - meta_scope: markup.bold.pml
    - include: inline_nodes
    - match: ']'
      scope: entity.name.tag.inline-node.bold.end.pml
      pop: true

## Font: Italic Text
####################

  italic:
    - match: '\[i\b'
      scope: entity.name.tag.inline-node.italic.begin.pml
      push: italic_inside
  italic_inside:
    - meta_scope: markup.italic.pml
    - include: inline_nodes
    - match: ']'
      scope: entity.name.tag.inline-node.italic.end.pml
      pop: true

## Font: Subscript Text
#######################

  subscript:
    - match: '\[sub\b'
      scope: entity.name.tag.inline-node.subscript.begin.pml
      push: subscript_inside
  subscript_inside:
    - meta_scope: markup.subscript.pml
    - include: inline_nodes
    - match: ']'
      scope: entity.name.tag.inline-node.subscript.end.pml
      pop: true

## Font: Superscript Text
#########################

  superscript:
    - match: '\[sup\b'
      scope: entity.name.tag.inline-node.superscript.begin.pml
      push: superscript_inside
  superscript_inside:
    - meta_scope: markup.superscript.pml
    - include: inline_nodes
    - match: ']'
      scope: entity.name.tag.inline-node.superscript.end.pml
      pop: true

## Font: Strikethrough Text
###########################

  strike:
    - match: '\[strike\b'
      scope: entity.name.tag.inline-node.strikethrough.begin.pml
      push: strike_inside
  strike_inside:
    - meta_scope: markup.strikethrough.pml
    - include: inline_nodes
    - match: ']'
      scope: entity.name.tag.inline-node.strikethrough.end.pml
      pop: true

## Font: Inline Source Code
###########################

  # Unlike `[b` and `[i`, the contents of `[c` need to be scoped to allow
  # proper styling. We also need to mimic how PMLC trims trailing spaces,
  # including when contents are spread across multiple indented lines.

  code:
    - match: '\[c\b(?:[ \t\n]*)'
      scope: entity.name.tag.inline-node.code.begin.pml
      push: code_inside
  code_inside:
    - meta_scope: markup.raw.inline.pml
    - match: '^[ \t]+'  # Consume leading WS != markup.raw.inline.content
    - include: inline_nodes
    - match: ']'
      scope: entity.name.tag.inline-node.code.end.pml
      pop: true
    - match: '.'
      scope: markup.raw.inline.content.pml


## Span
#######

  span:
    - match: '\[span\b'
      scope: entity.name.tag.inline-node.span.begin.pml
      push: span_inside
  span_inside:
    - meta_scope: markup.span.pml
    - include: inline_nodes
    - match: ']'
      scope: entity.name.tag.inline-node.span.end.pml
      pop: true

## New Line and Space
#####################

  newline:
    - match: '\[nl\b'
      scope: entity.name.tag.inline-node.newline.begin.pml
      push: newline_inside
  newline_inside:
    - meta_scope: entity.name.tag.newline.pml
    - meta_include_prototype: false
    - include: comment
    - include: comsume-whitespace
    - include: comsume-EOL
    - match: ']'
      scope: entity.name.tag.inline-node.newline.end.pml
      pop: true
    - match: '.'
      scope: invalid.illegal.pml

  space:
    - match: '\[sp\b'
      scope: entity.name.tag.inline-node.nbsp.begin.pml
      push: space_inside
  space_inside:
    - meta_scope: entity.name.tag.nbsp.pml
    - meta_include_prototype: false
    - include: comment
    - include: comsume-whitespace
    - include: comsume-EOL
    - match: ']'
      scope: entity.name.tag.inline-node.nbsp.end.pml
      pop: true
    - match: '.'
      scope: invalid.illegal.pml

# ==============================================================================
#                             Text Processing Nodes
# ==============================================================================

  text_processing_nodes:
    - include: constant   # Constant Parameter
    # insert              # Insert File
    # comment [-> prototype]

## Constant Parameter
#####################

  constant:
    - match: '\[const\b'
      scope: entity.name.tag.inline-node.constant.begin.pml
      push: constant_inside
  constant_inside:
    - meta_scope: meta.tag.constant.pml
    - match: ']'
      scope: entity.name.tag.inline-node.constant.end.pml
      pop: true
    - match: '\b{{custom_id}}\b'
      scope: entity.name.function.pml
    - match: '='
      scope: keyword.operator.assignment.pml
      set: constant_value
  constant_value:
    - meta_scope: meta.tag.constant.pml
    - match: ']'
      scope: entity.name.tag.inline-node.constant.end.pml
      pop: true
    - include: string
    - include: bail-out

# ******************************************************************************
# *                                                                            *
# *                               PML Attributes                               *
# *                                                                            *
# ******************************************************************************

# As a general rule, node attributes should be matched regardless of the current
# node (i.e. the syntax shouldn't be context-strict). It's not the business of
# the highlighter to validate the syntax; on the contrary, error tolerance is
# preferable, since users often copy-and-paste snippets around to work quicker.

  attributes:
    - include: line_continuation
    - include: pop-at-TagEnd
    - include: pop-at-EOL
    - include: attr_date
    - include: attr_time
    - include: attr_id
    - include: attr_html
    # TODO: implement remaining attributes...
    - include: attr_unknown   # <- Temp fall-back for unimplemented attributes!


  attr_date:
    - match: '\b(date)\b'
      scope: entity.other.attribute-name.date.pml
      push:
        - match: '='
          scope: keyword.operator.assignment.pml
          set:
            - include: pop-at-line_continuation
            - include: pop-at-TagEnd
            - include: pop-at-EOL
            - include: date_type


  attr_time:
    - match: '\b(time)\b'
      scope: entity.other.attribute-name.time.pml
      push:
        - match: '='
          scope: keyword.operator.assignment.pml
          set:
            - include: pop-at-line_continuation
            - include: pop-at-TagEnd
            - include: pop-at-EOL
            - include: time_type


  attr_id:
    - match: '\b(id)\b'
      scope: entity.other.attribute-name.id.pml
      push:
        - match: '='
          scope: keyword.operator.assignment.pml
          set:
            - include: pop-at-line_continuation
            - include: pop-at-TagEnd
            - include: pop-at-EOL
            - include: id_type


  attr_html:
    - match: '\b(html_[a-z]{2}[a-z-]*)\b'
      scope: entity.other.attribute-name.html.pml
      push:
        - match: '='
          scope: keyword.operator.assignment.pml
          set:
            - include: pop-at-line_continuation
            - include: pop-at-TagEnd
            - include: pop-at-EOL
            - match: '"'
              scope: punctuation.definition.string.begin.pml
              set:
                # TODO: Should stop using prototypes inside string?
                - meta_scope: string.quoted.double.pml
                - include: string_quoted_escapes
                - match: '"'
                  scope: punctuation.definition.string.end.pml
                  pop: true
            - include: string_unquoted
            - include: bail-out


  attr_unknown:
    # This is a just a temporary scope, to cover the unimplemented attributes.
    # It will be removed once all nodes and attributes are implemented.
    - include: line_continuation
    - match: ']'
      scope: entity.name.tag.unknown.end.pml
      pop: true
    - match: '\b({{pml_token}})\b *(=)'
      captures:
        1: entity.other.attribute-name.unknown.pml
        2: keyword.operator.assignment.pml
    - include: pop-at-EOL

# ******************************************************************************
# *                                                                            *
# *                                 PML Types                                  *
# *                                                                            *
# ******************************************************************************

# Attributes' and tags' values can be of various types:
#   - [x] String double-quoted
#   - [x] String without quotes
#   - [x] Date
#   - [x] Time
#   - [x] ID
#   - [ ] URL
#   - [ ] File (absolute/relative)
#   - [ ] ... others??? ...

  string:
    - include: string_quoted   # must always precede `string_unquoted`
    - include: string_unquoted
    - include: bail-out
  # - include: pop-at-EOL  # <- might be required later!

  string_quoted:
    - match: '"'
      scope: punctuation.definition.string.begin.pml
      push: string_quoted_inside
  string_quoted_inside:
    # TODO: Should stop using prototypes inside string?
    - meta_scope: string.quoted.double.pml
    - include: string_quoted_escapes
    - match: '"'
      scope: punctuation.definition.string.end.pml
      pop: true

  string_quoted_escapes:
    - match: '\\"'
      scope: constant.character.escape.pml

  string_unquoted:
    - match: '(?! )'
      push:
        - meta_scope: string.unquoted.pml
        - match: '(?=\s+)$'
          pop: true
        - match: '(?=\s*\])'
          pop: true


  id_type:
    - match: '\b({{custom_id}})\b(?![\.\-])'
      scope: string.unquoted.id.pml meta.toc-list.id.pml
      pop: true
    - match: '\b([^ \t\n]+)\b'
      scope: invalid.illegal.id.pml
      # See pml-lang/user-manual/discussions/3


  date_type:
    - match: '\b(?=(\d{4}|Y{4})-(\d{2}|M{2})-(\d{2}|D{2}))\b'
      push:
      - match: '\b(?:(0000)|(\d{4})|(Y{4}))-(?:(0[1-9]|1[0-2])|(\d{2})|(M{2}))-(?:(0[1-9]|[1-2]\d|3[01])|(\d{2})|(D{2}))\b'
        captures:
          0: string.unquoted.date.pml
          1: invalid.illegal.year.pml
          2: constant.numeric.integer.date.year.pml
          3: constant.other.placeholder.year.pml
          4: constant.numeric.integer.date.month.pml
          5: invalid.illegal.month.pml
          6: constant.other.placeholder.month.pml
          7: constant.numeric.integer.date.day.pml
          8: invalid.illegal.day.pml
          9: constant.other.placeholder.day.pml
        pop: true


  time_type:
    - match: '\b(?=(\d\d|hh):(\d\d|mm))\b'
      push:
      - match: '\b(?:([01]\d|2[0-3])|(\d\d)|(hh)):(?:([0-5]\d)|(\d\d)|(mm))\b'
        captures:
          0: string.unquoted.time.pml
          1: constant.numeric.integer.time.hour.pml
          2: invalid.illegal.hour.pml
          3: constant.other.placeholder.hour.pml
          4: constant.numeric.integer.time.minutes.pml
          5: invalid.illegal.minutes.pml
          6: constant.other.placeholder.minutes.pml
        pop: true


# EOF #
